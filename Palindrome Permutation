/*Write an efficient method that checks whether any permutation ↴ of an input string is a palindrome. ↴
You can assume the input string only contains lowercase letters.

Examples:

"civic" should return true
"ivicc" should return true
"civil" should return false
"livci" should return false*/

import org.junit.Test;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;
import java.util.HashMap;

import static org.junit.Assert.*;

public class Solution {

    public static boolean hasPalindromePermutation(String theString) {

        // check if any permutation of the input is a palindrome
        HashMap <Character, Integer> letters = new HashMap<Character, Integer>();
        
        char[] chars = theString.toCharArray();
        
        for ( char c : chars){
            if (letters.containsKey(c)) {
                letters.put (c, letters.get(c)+1);
            }
            else {
                letters.put (c, 1);
            }
        }
        
        for (Character c : letters.keySet()){
            System.out.println ("key = " + c + " Value = " + letters.get(c));
        }
        
        int count =0;
        for (int value : letters.values()) {
            if (value % 2 == 1){
                count++;
            }
        }
        
        if (count > 1) {
            return false;
        }
 
        return true;
    }
}
